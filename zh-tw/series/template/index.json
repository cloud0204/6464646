[{"content":"Thymeleaf 可以取代JSP https://www.thymeleaf.org/documentation.html\n Can Thymeleaf be used as a complete substitute for JSP and JSTL?\n究竟Thymeleaf能否完全取代JSP and JSTL?\nAbsolutely. Not only it can, but we strongly encourage you to do so.\n絕對可以，而且我們強烈鼓勵你使用。\n maven的pom.xml添加依賴\n1 2 3 4  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-thymeleaf\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;    static：用於存放靜態資源，例如html、JavaScript、css以及圖片等。 templates：用來存放模板引擎Thymeleaf(本質依然是.html檔案)  static網站檔案放入src\\main\\resources\\static底下\nindex.html放入src\\main\\resources\\templates底下\n修改code\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  package com.example.demo; import java.util.ArrayList; import java.util.List; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; @Controller public class H { public static void main(String[] args) { // TODO Auto-generated method stub  } @GetMapping(\u0026#34;/\u0026#34;) public String h666(Model model) { //Model型別即用來儲存資料供我們Thymeleaf頁面使用 \tmodel.addAttribute(\u0026#34;name\u0026#34;,\u0026#34;kkkkkkkkkk\u0026#34;); List\u0026lt;String\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); list.add(\u0026#34;greg\u0026#34;); list.add(\u0026#34;54564\u0026#34;); list.add(\u0026#34;hsfiuwe\u0026#34;); model.addAttribute(\u0026#34;list\u0026#34;,list); return \u0026#34;index\u0026#34;; } @GetMapping(\u0026#34;/index.html\u0026#34;) public String h6() { return \u0026#34;index\u0026#34;; } }    Model是一個特殊的類，相當於維護一個Map一樣，而Model中的資料通過controller層的關聯繫結在view層(即Thymeleaf中)可以直接使用。 return \u0026ldquo;hello\u0026rdquo;：這個index就是在templates目錄下對應模板(本次為Thymeleaf模板)的名稱，即應該對應hello.html這個Thymeleaf檔案(與頁面關聯預設規則為：templates目錄下返回字串.html)。   index.html加入code\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;!-- 使用thymeleaf --\u0026gt; \u0026lt;html xmlns:th=\u0026#34;http://www.thymeleaf.org\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;thymeleaf test\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- 離線狀態顯示name --\u0026gt; \u0026lt;p th:text=\u0026#34;${name}\u0026#34;\u0026gt;name\u0026lt;/p\u0026gt; \u0026lt;!-- 找不到${what}不顯示 --\u0026gt; \u0026lt;p th:text=\u0026#34;${what}\u0026#34;\u0026gt;what?\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;span th:each=\u0026#34;item:${list}\u0026#34; th:text=\u0026#34;${item}\u0026#34;\u0026gt;ggggggggggg\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;    畫面顯示  kkkkkkkkkk\ngreg54564hsfiuwe\n  分別1:  @GetMapping是在Spring4.3時才有的，在意思上@GetMapping 就是@RequestMapping (method = RequestMethod.GET)\n 分別2:  @GetMapping 可在method層面上用作處理 http 的請求。\n@RequestMapping 可在class層面上配合@GetMapping 使用。\n 分別3:  @GetMapping 與 @RequestMapping 不能互相交換。\n第1,\n@GetMapping的位置只能在class之內，而@RequestMapping在內外也可以\n Springboot官方提供的配置(application.properties)內容有以下：\n# THYMELEAF (ThymeleafAutoConfiguration) spring.thymeleaf.cache=true # Whether to enable template caching. spring.thymeleaf.check-template=true # Whether to check that the template exists before rendering it. spring.thymeleaf.check-template-location=true # Whether to check that the templates location exists. spring.thymeleaf.enabled=true # Whether to enable Thymeleaf view resolution for Web frameworks. spring.thymeleaf.enable-spring-el-compiler=false # Enable the SpringEL compiler in SpringEL expressions. spring.thymeleaf.encoding=UTF-8 # Template files encoding. spring.thymeleaf.excluded-view-names= # Comma-separated list of view names (patterns allowed) that should be excluded from resolution. spring.thymeleaf.mode=HTML # Template mode to be applied to templates. See also Thymeleaf's TemplateMode enum. spring.thymeleaf.prefix=classpath:/templates/ # Prefix that gets prepended to view names when building a URL. spring.thymeleaf.reactive.chunked-mode-view-names= # Comma-separated list of view names (patterns allowed) that should be the only ones executed in CHUNKED mode when a max chunk size is set. spring.thymeleaf.reactive.full-mode-view-names= # Comma-separated list of view names (patterns allowed) that should be executed in FULL mode even if a max chunk size is set. spring.thymeleaf.reactive.max-chunk-size=0 # Maximum size of data buffers used for writing to the response, in bytes. spring.thymeleaf.reactive.media-types= # Media types supported by the view technology. spring.thymeleaf.servlet.content-type=text/html # Content-Type value written to HTTP responses. spring.thymeleaf.suffix=.html # Suffix that gets appended to view names when building a URL. spring.thymeleaf.template-resolver-order= # Order of the template resolver in the chain. spring.thymeleaf.view-names= # Comma-separated list of view names (patterns allowed) that can be resolved. ","description":"","id":3,"section":"posts","tags":["Thymeleaf","maven","jsp"],"title":"Thymeleaf","uri":"https://cloud0204.github.io/zh-tw/posts/thymeleaf/"},{"content":"build.gradle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158  apply plugin: \u0026#39;java\u0026#39; apply plugin: \u0026#39;war\u0026#39; apply plugin: \u0026#39;eclipse-wtp\u0026#39; sourceCompatibility = 1.8\t//設定編譯階段的JDK版本 sourceSets.main.java.srcDir \u0026#39;src\u0026#39;\t//使用src目錄放置Java程式原始碼 (gradle原預設位置是src/main/java目錄) sourceSets.main.resources.srcDir \u0026#39;src\u0026#39;\t//使用src目錄放置resources原始碼 (gradle原預設位置是src/main/resources目錄) (在進行cargoRedeployRemote以熱部署匯出war檔時，將可包含xml檔)  webAppDirName = \u0026#39;WebContent\u0026#39;\t//使用WebContent目錄放置網頁資源 \trepositories { mavenCentral()\t//使用 maven central repository (中央存儲庫) } // In this section you declare where to find the dependencies of your project repositories { // Use jcenter for resolving your dependencies.  // You can declare any Maven/Ivy/file repository here.  jcenter() } // 設置依賴 // Gradle 7.0 -- 參考 https://tomgregory.com/gradle-implementation-vs-compile-dependencies/ // Maven 中央儲存庫網址 https://mvnrepository.com // 依需要自行加入會用到的函式庫Library套件，格式如下 :\u0026lt;groupId\u0026gt; : \u0026lt;artifactId\u0026gt; : \u0026lt;version\u0026gt; dependencies { // =====================================================================================  // 以下為 Spring Boot 使用  // 用途說明1: Inherit defaults from Spring Boot  implementation(\u0026#34;org.springframework.boot:spring-boot-starter-parent:2.4.2\u0026#34;){ exclude(module: \u0026#34;spring-boot-starter-logging\u0026#34;) } // 用途說明2: Add typical dependencies for a web application --\u0026gt;  implementation(\u0026#34;org.springframework.boot:spring-boot-starter-web:2.4.2\u0026#34;){ exclude(module: \u0026#34;spring-boot-starter-logging\u0026#34;) } // 用途說明3: Starter for using Spring Data JPA with Hibernate --\u0026gt;  implementation(\u0026#34;org.springframework.boot:spring-boot-starter-data-jpa:2.4.2\u0026#34;) { exclude(module: \u0026#34;spring-boot-starter-logging\u0026#34;) } // 用途說明4: 用途說明4: for log4j.properties --\u0026gt; \t//\t\u0026lt;!-- Spring Boot日誌系統預設是使用logback --\u0026gt; \t//\t\u0026lt;!-- 對於習慣了log4j的開發者，Spring Boot依然有很好的支援 --\u0026gt; \t//\t\u0026lt;!-- 不過我們在引入log4j之前，需要先排除該logback jar的依賴(如上所示)，再引入log4j的依賴(如下所示): --\u0026gt;  implementation(\u0026#34;org.springframework.boot:spring-boot-starter-log4j:1.3.8.RELEASE\u0026#34;) // ===================================================================================== \t// 以下為 hibernate 使用  // hibernate-core \u0026lt;!-- spring-boot-starter-data-jpa(2.4.2) 已內建 Hibernate 5.4.27 依賴，但預設未下載 --\u0026gt;  implementation(\u0026#34;org.hibernate:hibernate-core:5.4.27.Final\u0026#34;) // hibernate-c3p0 連線池 \u0026lt;!-- spring-boot 已內建依賴，但預設未下載 --\u0026gt;  implementation(\u0026#34;org.hibernate:hibernate-c3p0:5.4.27.Final\u0026#34;) // hibernate-proxool 連線池 \u0026lt;!-- spring-boot 已內建依賴，但預設未下載 --\u0026gt;  implementation(\u0026#34;org.hibernate:hibernate-proxool:5.4.27.Final\u0026#34;) // ===================================================================================== \t// 以下為 Web App 預備使用  // Servlet 4.0.1 \u0026lt;!-- spring-boot 已內建 Servlet 4..01 依賴，但預設未下載 --\u0026gt;  compileOnly(\u0026#34;javax.servlet:javax.servlet-api:4.0.1\u0026#34;) // jstl \u0026lt;!-- spring-boot 未內建依賴 --\u0026gt;  runtimeOnly(\u0026#34;org.apache.taglibs:taglibs-standard-impl:1.2.5\u0026#34;) // jstl \u0026lt;!-- spring-boot 未內建依賴 --\u0026gt;  runtimeOnly(\u0026#34;org.apache.taglibs:taglibs-standard-spec:1.2.5\u0026#34;) // websocket \u0026lt;!-- spring-boot 已內建依賴，但預設未下載 --\u0026gt;  compileOnly(\u0026#34;javax.websocket:javax.websocket-api:1.1\u0026#34;) // javax.json \u0026lt;!-- spring-boot 未內建依賴 --\u0026gt;  implementation(\u0026#34;org.glassfish:javax.json:1.1.2\u0026#34;) // com.sun.mail \u0026lt;!-- spring-boot(2.3.3) 未內建依賴 --\u0026gt;  implementation(\u0026#34;com.sun.mail:javax.mail:1.6.2\u0026#34;) // ===================================================================================== \t// 以下為 JSR 303/349/380 Bean Validation Framework 預備使用 --\u0026gt; \t// javax.validation \u0026lt;!-- spring-boot(2.3.3) 已內建依賴，但預設未下載 --\u0026gt;  implementation group: \u0026#39;javax.validation\u0026#39;, name: \u0026#39;validation-api\u0026#39;, version: \u0026#39;2.0.1.Final\u0026#39; // org.hibernate.validator \u0026lt;!-- spring-boot(2.3.3) 已內建依賴，但預設未下載 --\u0026gt;  implementation group: \u0026#39;org.hibernate.validator\u0026#39;, name: \u0026#39;hibernate-validator\u0026#39;, version: \u0026#39;6.1.7.Final\u0026#39; // ======================================================================== \t// Oracle JDBC驅動程式 ojdbc8.jar \u0026lt;!-- spring-boot(2.4.2) 已內建依賴19.8.0.0，但預設未下載 \t// Oracle JDBC Driver compatible with JDK8, JDK11, JDK12, JDK13, JDK14 and JDK15 --\u0026gt;  implementation(\u0026#34;com.oracle.database.jdbc:ojdbc8:19.8.0.0\u0026#34;) // ======================================================================== \t// MySQL8 JDBC驅動程式 ojdbc8.jar--\u0026gt; \u0026lt;!-- spring-boot(2.4.2) 已內建依賴8.022，但預設未下載 --\u0026gt; \t// MySQL Connector/J  implementation(\u0026#34;mysql:mysql-connector-java:8.0.22\u0026#34;) } buildscript { repositories { jcenter() } dependencies { classpath \u0026#39;com.bmuschko:gradle-cargo-plugin:2.2.2\u0026#39; } } //使用gradle-cargo-plugin熱部署(輕量級)war //需先啟動Tomcat，並於tomcat-users.xml添加：\u0026lt;user password=\u0026#34;manager-script\u0026#34; roles=\u0026#34;manager-script\u0026#34; username=\u0026#34;manager-script\u0026#34;/\u0026gt; apply plugin: \u0026#39;com.bmuschko.cargo\u0026#39; cargo { containerId = \u0026#39;tomcat9x\u0026#39; port = 8081 remote { protocol = \u0026#39;http\u0026#39; hostname = \u0026#39;localhost\u0026#39; username = \u0026#39;manager-script\u0026#39; password = \u0026#39;manager-script\u0026#39; } } //Eclipse Project Facets 只有在 Dynamic Web Project 時才有功能，只是方便\u0026#34;快速擴充套件\u0026#34; 與 \u0026#34;控管套件版本\u0026#34; import org.gradle.plugins.ide.eclipse.model.Facet eclipse { wtp { facet { facet name: \u0026#39;jst.web\u0026#39;, type: Facet.FacetType.fixed facet name: \u0026#39;jst.web\u0026#39;, version: \u0026#39;3.1\u0026#39; facet name: \u0026#39;jst.java\u0026#39;, type: Facet.FacetType.fixed facet name: \u0026#39;jst.java\u0026#39;, version: \u0026#39;1.8\u0026#39; facet name: \u0026#39;wst.jsdt.web\u0026#39;, type: Facet.FacetType.fixed facet name: \u0026#39;wst.jsdt.web\u0026#39;, version: \u0026#39;1.0\u0026#39; } } } //在進行cargoRedeployRemote以熱部署匯出war檔時，將可包含xml檔與java原始檔 war { webInf{ from(\u0026#39;src\u0026#39;) { include \u0026#39;**/*.*\u0026#39; into(\u0026#39;classes/\u0026#39;) } } }   ","description":"Gradle 是用途廣泛的建置工具","id":4,"section":"posts","tags":["gradle"],"title":"gradle使用","uri":"https://cloud0204.github.io/zh-tw/posts/gradle%E4%BD%BF%E7%94%A8/"},{"content":"pom.xmlu0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.MySpring-boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;com.MySpring-boot\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;packaging\u0026gt;war\u0026lt;/packaging\u0026gt; \u0026lt;build\u0026gt; \u0026lt;sourceDirectory\u0026gt;src\u0026lt;/sourceDirectory\u0026gt; \u0026lt;resources\u0026gt; \u0026lt;resource\u0026gt; \u0026lt;directory\u0026gt;src\u0026lt;/directory\u0026gt; \u0026lt;excludes\u0026gt; \u0026lt;exclude\u0026gt;**/*.java\u0026lt;/exclude\u0026gt; \u0026lt;/excludes\u0026gt; \u0026lt;/resource\u0026gt; \u0026lt;/resources\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;artifactId\u0026gt;maven-compiler-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;!-- \u0026lt;version\u0026gt;3.8.1\u0026lt;/version\u0026gt; --\u0026gt; \u0026lt;!-- spring-boot-starter-data-jpa 已內建依賴 --\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;source\u0026gt;1.8\u0026lt;/source\u0026gt; \u0026lt;target\u0026gt;1.8\u0026lt;/target\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;artifactId\u0026gt;maven-war-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;!-- \u0026lt;version\u0026gt;3.3.1\u0026lt;/version\u0026gt; --\u0026gt; \u0026lt;!-- spring-boot-starter-data-jpa 已內建依賴 --\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;warSourceDirectory\u0026gt;WebContent\u0026lt;/warSourceDirectory\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;!-- Maven 中央儲存庫網址 https://mvnrepository.com/ --\u0026gt; \u0026lt;!-- ========================================================================================== --\u0026gt; \u0026lt;!-- 以下為 為 Spring Boot 使用 --\u0026gt; \u0026lt;!-- 用途說明1: Inherit defaults from Spring Boot --\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.4.2\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!-- 用途說明2: Add typical dependencies for a web application --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 用途說明3: Starter for using Spring Data JPA with Hibernate --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-data-jpa\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 用途說明4: for log4j.properties --\u0026gt; \u0026lt;!-- Spring Boot日誌系統預設是使用logback --\u0026gt; \u0026lt;!-- 對於習慣了log4j的開發者，Spring Boot依然有很好的支援 --\u0026gt; \u0026lt;!-- 不過我們在引入log4j之前，需要先排除該logback jar的依賴，再引入log4j的依賴，如下所示: --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;exclusions\u0026gt; \u0026lt;exclusion\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-logging\u0026lt;/artifactId\u0026gt; \u0026lt;/exclusion\u0026gt; \u0026lt;/exclusions\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-log4j\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.3.8.RELEASE\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- ========================================================================================== --\u0026gt; \u0026lt;!-- 以下為 hibernate 使用 --\u0026gt; \u0026lt;!-- hibernate-core --\u0026gt; \u0026lt;!-- spring-boot-starter-data-jpa(2.4.2) 已內建 Hibernate 5.4.27 依賴，但預設未下載 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.hibernate\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hibernate-core\u0026lt;/artifactId\u0026gt; \u0026lt;!-- \u0026lt;version\u0026gt;5.4.27.Final\u0026lt;/version\u0026gt; --\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- hibernate-c3p0 連線池 --\u0026gt; \u0026lt;!-- spring-boot 已內建依賴，但預設未下載 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.hibernate\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hibernate-c3p0\u0026lt;/artifactId\u0026gt; \u0026lt;!-- \u0026lt;version\u0026gt;5.4.27.Final\u0026lt;/version\u0026gt; --\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- hibernate-proxool 連線池 --\u0026gt; \u0026lt;!-- spring-boot 已內建依賴，但預設未下載 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.hibernate\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hibernate-proxool\u0026lt;/artifactId\u0026gt; \u0026lt;!-- \u0026lt;version\u0026gt;5.4.27.Final\u0026lt;/version\u0026gt; --\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- ========================================================================================== --\u0026gt; \u0026lt;!-- 以下為 Web App 預備使用 --\u0026gt; \u0026lt;!-- Servlet 4.0.1 --\u0026gt; \u0026lt;!-- spring-boot 已內建 Servlet 4.0.1 依賴，但預設未下載 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.servlet\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;javax.servlet-api\u0026lt;/artifactId\u0026gt; \u0026lt;!-- \u0026lt;version\u0026gt;4.0.1\u0026lt;/version\u0026gt; --\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- JSTL --\u0026gt; \u0026lt;!-- spring-boot 未內建依賴 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.taglibs\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;taglibs-standard-impl\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.2.5\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- JSTL --\u0026gt; \u0026lt;!-- spring-boot 未內建依賴 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.taglibs\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;taglibs-standard-spec\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.2.5\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- websocket --\u0026gt; \u0026lt;!-- spring-boot 已內建依賴，但預設未下載 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.websocket\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;javax.websocket-api\u0026lt;/artifactId\u0026gt; \u0026lt;!-- \u0026lt;version\u0026gt;1.1\u0026lt;/version\u0026gt; --\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- javax.json --\u0026gt; \u0026lt;!-- spring-boot 未內建依賴 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.glassfish\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;javax.json\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.1.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- com.sun.mail --\u0026gt; \u0026lt;!-- spring-boot 未內建依賴 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.sun.mail\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;javax.mail\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.6.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- ========================================================================================== --\u0026gt; \u0026lt;!-- 以下為 JSR 303/349/380 Bean Validation Framework 預備使用 --\u0026gt; \u0026lt;!-- javax.validation --\u0026gt; \u0026lt;!-- spring-boot(2.4.2) 已內建依賴，但預設未下載 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.validation\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;validation-api\u0026lt;/artifactId\u0026gt; \u0026lt;!-- \u0026lt;version\u0026gt;2.0.1.Final\u0026lt;/version\u0026gt; --\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- org.hibernate.validator --\u0026gt; \u0026lt;!-- spring-boot(2.4.2) 已內建依賴，但預設未下載 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.hibernate.validator\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hibernate-validator\u0026lt;/artifactId\u0026gt; \u0026lt;!-- \u0026lt;version\u0026gt;6.1.7.Final\u0026lt;/version\u0026gt; --\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- ========================================================================================== --\u0026gt; \u0026lt;!-- Oracle JDBC驅動程式 ojdbc8.jar--\u0026gt; \u0026lt;!-- spring-boot(2.4.2) 已內建依賴19.8.0.0，但預設未下載 --\u0026gt; \u0026lt;!-- Oracle JDBC Driver compatible with JDK8, JDK11, JDK12, JDK13, JDK14 and JDK15 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.oracle.database.jdbc\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;ojdbc8\u0026lt;/artifactId\u0026gt; \u0026lt;!-- \u0026lt;version\u0026gt;21.1.0.0\u0026lt;/version\u0026gt; --\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- MySQL8 JDBC驅動程式 ojdbc8.jar--\u0026gt; \u0026lt;!-- spring-boot(2.4.2) 已內建依賴8.022，但預設未下載 --\u0026gt; \u0026lt;!-- MySQL Connector/J --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-java\u0026lt;/artifactId\u0026gt; \u0026lt;!-- \u0026lt;version\u0026gt;8.0.23\u0026lt;/version\u0026gt; --\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt;   ","description":"Maven 是用途廣泛的建置工具","id":5,"section":"posts","tags":["maven"],"title":"Maven使用","uri":"https://cloud0204.github.io/zh-tw/posts/maven%E4%BD%BF%E7%94%A8/"},{"content":"簡介 Spring Boot，Spring 和Spring MVC差別?  Spring是一種框架，包含一系列的IoC容器的設計和依賴注入(DI)及整合AOP功能。 Spring Boot 和 Spring MVC 都是一種框架，同時它們的核心是Spring。 Spring Boot包含了Spring MVC，同時能簡化配置。  模型（Model）進行資料管理和資料庫設計。\n視圖（View）是負責呈現模型數據和讓客戶端的瀏覽器能夠將資料展示出來。\n控製器（Controller）負責處理用戶的請求，對請求進行處理。  Spring Boot 是？  Spring Boot 讓大家能輕鬆地創建獨立的、(production-grade)耐用又有擴展性的、以Spring為基礎的且能直接運行的應用程序。 針對Spring的平台和第三方library，Spring的官方機構會有個性地為用家提供一個極少煩惱的開始環境。 Spring boot的應用程序只需要很少的Spring 配置。  而所謂的個性就是指它會預設各種合理的默認配置包括放棄了XML、Spring Boot Web 應用程序使用了一個(embedded tomcat container)嵌入式Tomcat容器、可以自定義 Spring Boot 應用程序等。\nSpring Boot 的特色  創建獨立的Spring 應用程式 嵌入式Tomcat, Jetty, Undertow (不用部署WAR包) 提出自主的starter來簡化配置 隨時自動地配置Spring及相關的第3方Library 提供已隨時就緒的功能如Metrics, 程式的健康檢查及外部化配置 不會生成任何代碼及無任何XML配置的前設要求  使用環境  Eclipse Jee  使用方式 安裝STS(Spring Tool Suite)\nHelp \u0026gt; Eclipse Marketplace\n建立專案\nFile \u0026gt; New \u0026gt;Others \u0026gt;Spring Starter Project \u0026gt;\n Spring Web  新增class Test並貼上下面程式碼測試\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package com.example.demo; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController //控制器(Controller) public class Test { public static void main(String[] args) { // TODO Auto-generated method stub  } @RequestMapping(\u0026#34;/\u0026#34;) //處理URL的請求，而這個動作相等於 Servlet中在web.xml的配置 \tpublic String hello(){ return \u0026#34;Hey, Spring Boot 的 Hello World ! \u0026#34;; } @RequestMapping(\u0026#34;/hi\u0026#34;) public String hi(){ return \u0026#34;hi ! \u0026#34;; } }   run as Spring Boots App\n成功運行Server，在瀏覽器上輸入http://localhost:8080\n畫面出現Hey, Spring Boot 的 Hello World !\n Controller/ Model都會存放在Java Resources \u0026gt; src/main/java 底下 View的文件都會存放在Java Resources \u0026gt; src/main/resources 底下   參考資料 https://ithelp.ithome.com.tw/articles/10213097\n","description":"","id":6,"section":"posts","tags":["Spring Boot"],"title":"如何使用Spring_Boot","uri":"https://cloud0204.github.io/zh-tw/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8spring_boot/"},{"content":"如何使用Hugo 1. 環境需求  Hugo 是跨平台的  2. 安裝Homebrew (macOS or Linux)  Homebrew 包管理器可用於 Linux 和Windows Linux 子系統 (WSL)。在 Linux 或 WSL 上運行時，Homebrew 以前稱為 Linuxbrew。它可以安裝在您的主目錄中，在這種情況下它不使用sudo。Homebrew 不使用主機系統提供的任何庫，除非glibc和gcc足夠新。Homebrew 可以為較舊的 Linux 發行版安裝自己當前版本的glibc和gcc。  1  /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34;     Run these two commands in your terminal to add Homebrew to your PATH:\n1 2  echo \u0026#39;eval \u0026#34;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\u0026#34;\u0026#39; \u0026gt;\u0026gt; /home/cloud/.profile eval \u0026#34;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\u0026#34;     3. 安裝HOGO 1  brew install hugo   4. 建立網站 1  hugo new site myblog    Download a theme into the same-named folder.\nChoose a theme from https://themes.gohugo.io/ or\ncreate your own with the \u0026ldquo;hugo new theme \u0026rdquo; command. Perhaps you want to add some content. You can add single files\nwith \u0026ldquo;hugo new /.\u0026rdquo;. Start the built-in live server via \u0026ldquo;hugo server\u0026rdquo;.  4.1 修改config.toml （使用其他主題不用改）\n1 2 3  baseURL = \u0026#39;http://example.org/\u0026#39; languageCode = \u0026#39;zh-tw\u0026#39; title = \u0026#39;cloud 的筆記\u0026#39;   1  hugo config   4.2 add a themes 使用主題ZZO-docs\n1 2 3  cd myblog git init git clone https://github.com/zzossig/hugo-theme-zzo.git themes/zzo   設定檔(範例)覆蓋到root目錄\n1  cp -r themes/zzo/exampleSite/* .   config.toml修改\n1 2 3  baseURL = \u0026#34;https://\u0026lt;your-username\u0026gt;.github.io/\u0026#34; ＃部署到 GitHub Pages title = \u0026#34;Hugo Zzo Theme\u0026#34; theme = \u0026#34;zzo\u0026#34;   編輯預設模板\n1  vim archetypes/default.md   新增page1.md\n1  hugo new posts/page1.md   建立靜態網站\n1  hugo   本地運行 hugo 專案\n1  hugo server   5. 部署到 GitHub Pages 建立Repository name \u0026lt;your-username\u0026gt;.github.io\n建立靜態網站後出現public資料夾\n1 2 3 4  cd public git init git add . git commit -m \u0026#34;first commit\u0026#34;   push到github\n1 2 3  git remote add origin git@github.com:\u0026lt;your-username\u0026gt;/\u0026lt;your-username\u0026gt;.github.io.git git branch -M main git push -u origin main   GitHub\u0026rsquo;s Repository-\u0026gt;Settings-\u0026gt;pages\nSource 選擇branch main root 成功部署\n6. 使用評論 https://utteranc.es/\nA lightweight comments widget built on GitHub issues.\n 確保 repo 是公開的，否則您的讀者將無法查看問題/評論。 確保在 repo 上安裝了utterances 應用程序，否則用戶將無法發表評論。 如果您的 repo 是一個 fork，請導航到其設置選項卡並確認問題功能已打開。  ","description":"安裝，建立，佈署","id":7,"section":"posts","tags":["hugo"],"title":"如何使用Hugo","uri":"https://cloud0204.github.io/zh-tw/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo/"},{"content":"  使用Hugo搭建的blog網站\n  留下筆記方便管理\n  ","description":"我的筆記","id":8,"section":"","tags":null,"title":"About","uri":"https://cloud0204.github.io/zh-tw/about/"}]